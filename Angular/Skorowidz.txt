Angular CLI - narzędzie do budowy i zarządzania aplikacją angularową
instalacja angulara:
- zainstaluj Node.js + npm
sprawdz:
cmd> node -v
cmd> npm -v   
    
instalacja angulara:
cmd> npm install -g @angular/cli

nowy projekt:
cmd>ng new projectName
obsługa:
cmd>cd projectName
cmd>ng serve 
            -> hostuje servis na localhost:4200
            -> right click on command line url to browse

extension w VSC:
Angular Extension Pack 7.2
--
TypeScript instalacja:
cmd> npm install -g TypeScript

TypeScript -> nie musi być kompilowany do JS aby dzialać,
 ale skompilowany dziala szybciej
kompilowanie TS -> JS
normalnie - tsc fileName.ts 
dynamicznie - tsc fileName.ts -w

kompilator w trybie>tsc fileName -w --sourcemap !!!!
pozwala na debuggowanie na podstawie TS
--
komiilowanie
1) otwórz wlasciwy terminal(lokalizacje)
2) ZAPISZ ZMIANY!
3) tsc name.ts
4) node name.js
--
deklarowanie typów:

nazwa: typ = wartość;
imie: string = 'Asia';

wartość określa typ, więc nie zawsze musimy go deklarować;
typy podstawowe:
string
number
tablice -> name: string[] = ['value1','value2'];
Lista -> listName: Array<Date> = [new Date(), new Date]()
pair -> [typ1,typ2] = ['val1',val2]
any -> name = value;

-> klasa nie musi mieć takiej samej nazwy jak plik
-> what is routing?

angular-cli.json -> renamed to -> angular.json

--
STRUKTURA
e2e: 
    -> testy końcowe

node_modules:
    -> moduły wykorzystywane przez projekt
    -> generowane na podstawie package.json
        ^ w nazwie określa minimalną wersje koneiczna do pobrania

package-lock.json:
    -> opisuje wykorzystywane moduły,
    -> opisuje to co zostało już pobrane

src: -> !!!
    -> app
        -> tu znajduje się nasz kod
            -> app.module.ts
            -> moduł naszej aplikacji
    -> assets
        -> pliki graficzne wykorzystywane przez aplikacje
    -> enviroments
        -> pliki do konfiguracji wersji produkcyjnej / developerskiej
    -> index.html
        -> strona startowa
    -> main.ts
        -> służy do odpalenia aplikacji
    -> style.css
        -> globalne style.css

angular.json:   -> !!!
    -> konfuguruje aplikację
        -> katalog główny
        -> ścierzki dostępów
        -> tablice styli -> np dla bootstrapa

karma.conf.js:
    -> kolejna konfiguracja

tslint.json:
    -> sprawdza poprawność kodu w typescript'cie

--
@NgModule

src/app/app.module.ts --> !!!!
    -> declarations: AppComponent
        -> dyrektywy /pipe'y / komponenty
    -> bootstrap: [AppComponent]
        -> tu startuje drzewo komponentów
    -> imports: [BrowserModule]
        -> Moduł odpowiedzialny za użycie przeglądarki
        -> jeśli chcemy użyć Http musimy tu go dodać
    -> providers: [informacje o naszych servisach]

--
lifeCycle
 app.module.ts -> exportowany
 main.ts 
    ->  importuje app.module.ts i 
        go analizuje w bootstrap.module

    -> odpala AppComponent jako pierwszy

    app.component.ts -> 
    selector: 'app-root' ->tego uzywamy w index.html
    <body><app-root> </app-root></body>

--
Komponent

-> musi mieć dekorator @Component
-> stanowi budulec aplikacji angularowej
-> musi być przypisany do NgModule aby móc być używanym
-> jest powiązany z plikami html / css
-> zawiera logikę odpowiedzialną za wyświetlanie danych w widoku html
-> posiada selektor np. <app-root>     

budowa:

import { Component } from '@angular/core';

@Component({ -> adnotacja 'Component'
  selector: 'app-root', -> selektor(d'Oh :-))
  templateUrl: './app.component.html', -> html powiazany z komponentem
  styleUrls: ['./app.component.css']   -> style powiazane z komponentem
})
export class AppComponent {
  title = 'angular-kurs';
}

-> po odpaleniu (ng serve) wszystkie zmiany w komponentach są wprowadzane natychmiast

--
TWORZENIE KOMPONENTOW
-> wejdz w katalog projektu
-> ng generate component componentName
-> alias: ng g c name
    -> --flat true -> wszystkie elementy luzem w katalogu app
-> src -> app -> componentName 

-> selektory generowane na podstawie angular.json
    -> prefix app
    -> selektory nie mogą się powtarzać!!!!

.component.spec.ts -> testowanie componentow
jesli chcey bez testow to generujemy komponent:

ng generate component name --spec false

dodawanie selektorów powiazanych z komponentami do app.component.html
powoduje ich automatyczne dopisanie i zaimportowanie do app.module.ts !

w konsekwencji czego -> usuwasz moduł -> usuń też importy!!!

komponent może składać się tylko i wyłącznie z pliku.ts
ale w takim wypadku musimy zadeklraować w @Component template i style.
używamy `` <- znak nad tyldą

@Component({
  selector: 'app-test',
  // templateUrl: './test.component.html',
  // styleUrls: ['./test.component.css']
  template: `<p>TS bitches</p>`,
  styles: [`p{font-size: 32px; color: blue;}`]
})

przydatne, np kiedy komponent nie ma mieć żadnego widoku -> jego zadaniem jest wczytanie np innego componentu:
template:`<app-comp></app-comp>`, -> gdzie app-comp to selector componentu który chcemy wczytać !!

INLINE
kiedy html i css znajduja sie w kodzie komponentu wtedy mówimy o komponentach inline;
postępujemy tak kiedy component nie jest wyswietlany w html, a jedynie sluzy jako kontener dla innych komponentow.

angular generuje selektory na podstawie nazwy komponentu i zadeklarowanego rpefixu (angular.json)

--
WYSWEITLANIE DANYCH ZKOMPONENTOW
- interpolacja stringow {{name}}
- *ngFor dla list i tabeli
- *ngIf instrukcje warunkowe

--
PIPE-y
dla formatowania textu uzywamy pipe API
{{some content | uppercase}}
className?.method(); -> ? sprawdza czy element jest undefined, albo nie został jeszcze zainicjalizowany.
alternatywny zapis : {{dog && dog.name}}

--
Dyrektywa *ngFor

dyrektywa działa jak foreach (iteruje po kolekcjach ) -> deklarujemy w elemencie html po czym ma iterować a następnie obsługujemy element. 
CAla dyrektywa musi byc podana w cudzyslowiu
    <ul>
      <li *ngFor="let day of dniTygodnia">
        {{day}}
      </li>
    </ul>

po ; mozemy odwolac sie do indexu:
<div *ngFor="let e of elements; let i = index">
index {{i}} odpowiada elementowi {{e}}
</div>
w ramach 'i' mozemy odwołać się na zasadzie nth-child
i = index / even / odd / first / last

umieszczajac ngFor w dyrektywie komponentu możemy tworzyć nowe komponenty w kodzie strony:
<app-component *ngFor="let i of [1, 2, 3]"></app-component>
wygeneruje 3 x app-component w danym komponencie

--
*ngIf 
steruje wyświetlaniem danych
 mozemy wykorzystac w polaczeniu z ngFor do wyswietlania okreslonych elementow:
 <div *ngFog="let day of days; let e = even">
 <p *ngIf="e">print content with even index</p> 
 </div>

 validacji elementow:
 <p *ngIf="array.length > 0">print element</p>

konstrukcja zapytania:
<ng-container *ngIf =" boolean condition; then tempName; else otherTempName"></ng-container>
-- 
ng-container 
component angularowy odporny na zmiane stylow
<ng-container *ngFor="let e of elements">
unaffected content
</ng-container> 

--
ng-template
predefiniowany element do ktorego mozemy się odwoływać

<ng-template #temlateName>
<p>some predefined content</p>
</ng-template>

<div *ngIf = "dogs.length > 0; else templateName"
        // some desirable content that get replaced by template
</div>

--
*ngSwitch
pole które będziemy sprawdzać deklarujemy:
<ng-container [ngSwitch]="name">

warunki deklarujemy:
<ng-container *ngSwitchCase="'condition'"> action </ng-container>

warunek domyślny deklarujemy na końcu:
<ng-container *ngSwitchDefault> default content </ng-container>

--
Angular modyfikuje DOM (document object model) w czasie rzeczywistym
dyrektywy strukturalne (*ngIf, *ngFor etc)- usuwaja elementy z DOM
- malo przyjazne w przypadku uzycia duzych komponentow

--
DATA BINDING
wiazanie danych
Property BINDING
    [target]="expression"
    component -> widok
Two-Way-BINDING
    [(ngModel)]="expression"
    component <-> widok
Event BINDING
    (target)="statement"
    eventy -> component

two way binding : need ti add import to app.module.ts
>>>>>  import { FormsModule } from '@angular/forms'; !!!!!! <<<<<
then use [(ngModel)]="name"

style globalne w tym reset robimy za pomocą pliku styles.css !!! :-)
routing możemy ustawić w module routingowym!

--
Event
obsługujemy eventy poprzez wysołanie metody z poziomu html
="method($event)"
potem obsługujemy event z poziomu TS np:
event.target.value - wartosc pola
event.clientX / clientY - koordynaty myszy

eventy binding html: binduje metody z eventami w html
(focus) -> clickniety
(click) -> d'Oh;
(mousemove) -> d'Oh
(paste) -> wklejono coś
(input) -> coś zostało wpisane

property binding: binduje pola komponentu do elementow html
[value]
[disabled]
[className]
[] -> Ctrl + space
do bindowania stringow uzywamy zapisu [value]="'string'";

two way binding [()] <- makes sense ;-)
pozwala nam uprościć kod -> nie musimy pisac metod

--
Routing

-> generate new component -> app.module.ts -> 
copy component import into app-routing.module ->
add path to Routes :  { path: 'folderName', component: ClassName },->
add router link to desired component:
<a routerLink="/folderName"> link name </a> ->
przekierowana treść znajdzie się w tym samym kontenerze co
<router-outlet></router-outlet>, wieć jeżeli chcemy aby content odpalał się w inym oknie musimy zastosować odpowiednia enkapsulacje.

--
template: pozwala podmienić kod html na inny przy uzyciu ngIF
<ng-template #name></ng-template>

--
komunikacja miedzy komponentami

@Input() -> tworzy property w komponencie

dekorator @input przed polem sprawia, że pole może być używane jako properties w selektorze danego komponentu:
@input() name = ' my name is';
<app-child [name]=""></app-child>

NOTE: przed użyciem trzeba zaimportować moduł z angular core, do komponentu dziecka.
import { Component, OnInit<----, Input } from '@angular/core';

--
@Output() -> tworzy event w komponencie
EventEmitter 
import z "angular core"!!, sluzy do wysylania eventu w górę, występuje razem z @Output
!!! sprawdzaj importy bo nazwy się powtarzają 1!!

--
#nazwa w selektorze albo w elemencie html daje nam dostep
poprzez alias przy uzyciu dekoratora @ViewChild('nazwa',{static: false}) <- flaga jest konieczna
po okresleniu jakiego typu jest to element mozemy go uzywac

--
Cykkl zycia
Interfejsy w kolejnosci wywolywania:

implements OnChanges ->
ngOnChanges - obserwuje zmiany zachodzące w komponentach
wywoluje sie przy kazdej zmianie referencji, zmiany stanu pomija.
tj. name = name + 'ciapek' pomija / name = new name('ciapek') widzi.

implements OnInit ->
ngOnInit
wywoluje sie 2gie po inicjalizacji / konstruktorze
warto wrzucic wszystkie operacje jakie chcemy wykonac zaraz po konstrukcji obiektu.

implements DoCheck ->
ngDoCheck
wywoluje sie sie po kazdej zmianie wywolanej eventem.

implements AfterContentInit
ngAfterContentInit

implements AfterContentChecked
ngAfterContentChecked
caly czas sprawdza widok

implements AfterViewInit
ngAfterViewInit

implements AfterViewChecked
ngAfterViewChecked
caly czas sprawdza widok

implements OnDestroy
ngOnDestroy
wywolywana kiedy komponent jest niszczony
mozemy wykonac np operacje zapisu do BD etc

--
stylowanie
[ngStyle]="{singleCssProperty: property}"
[ngStyle]="{cssProperty: componentFunction()}"

[ngClass="class name"]

[ngClass="{'odd-class': odd === true}"
 albo
[ngClass="{'odd-class': odd}"

[ngClass]="{'odd-class': odd === true,
  'last': taskList2.length===1}">

każdy styl jest odpowiedni tylko dla danego komponentu, ale mozemy go exportować;

w komponencie
@Component({
    encapsulation: ViewEncapsulation.none;
    encapsulation: ViewEncapsulation.Emulated;
})
none -> style zaczynaja dzialac globalnie
emulated -> w ramach komponentu

--
bootstrap
- easy way -> dodac do package.json
<dane ze strony> 
- hard way -> npm inestall bootstrap@4.0.0beta

w angular.json -> styles: "style.css", " "../node_modules/bootstrap/dist/css/bootstrap.min.css""

killing app = in right terminal use ctril + c

--
Servisy

komendy:
 ng generate service name
 ng g s name

 serwis jest zwykla klasa ktora posiada dekorator @Injectable

 możemy tworzyć instancje serwisu jak każdej innej klasy ale lepiej uzyć dependency injection. dzieki temu servisy moga być dostepne globalnie. 
 możemy mieć jedną albo wiele instancji danego servisu;

 servisy deklarujemy w konstruktorze(!):

 constructor(private myService: ClickService) { }
 a potem rejestrujemy:
 @Component -> providers: [ClickService]

tworzymy wtedy osobną instancje servisu dla każdego komponentu

aby mieć jedną i tylko jedną instancję kasujemy pole "providers" w komponencie i umieszczamy je w "app-root".
wtedy servis jest dzielony pomiedzy wszystkie komponenty;
albo
dodajemy providersa w @nGModule ! -> wtedy servis jest dzielony przez wszystki moduły!

Angular v6+ nowy sposob rejestrowania servisow:

@Injectable({
  providedIn: 'root'
})
--
rxjs biblioteka obserwatorów:

servis -> 
import {Subject} from 'rxjs/Subject';
import {Observable} from 'rxjs/Subject';

private sum = new Subject<number>();

-> tu subject informuje wszystkich o zmianie
method(){
this.sum.next(this.sumClicks);
}
-> zwraca subject sum jako Observable
getSum(): Observable<number>{
  return this.sum.asObservable();
}
-> subskrybujemy obserwowalny obiekt i bindujemy z polem
this.cService.getSum().subscribe(value => {
      this.allClicks = value;
    })

@Injectable jest oznaczeniem umozliwiajacym wstrzykiwanie DO tej klasy a nie na odwrót.
@Comploment posiada rozszerzona funkcjonalnosc @Injectable

Servisy z AppModule mogą być nadpisywane poprzez dodanie servisu do providerow w komponencie
wtedy wszystkie dzieci uzywaja instancji nadpisanej
jak kaskadowosc w css albo dziedziczenie.